"use strict";

// Generated from /home/jason/Projets/u16to32/src/static/antlr4/grammars/U16To32.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');

var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964", "\x02\nS\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04", "\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07", "\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04\f\t\f", "\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x03\x02\x03", "\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03", "\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03", "\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03", "\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03", "\x07\x03\x07\x05\x07;\n\x07\x03\b\x03\b\x03\b\x03", "\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03", "\n\x03\x0B\x03\x0B\x03\f\x03\f\x03\r\x03\r\x03\x0E", "\x03\x0E\x03\x0F\x03\x0F\x02\x02\x10\x03\x03\x05", "\x04\x07\x05\t\x06\x0B\x07\r\x02\x0F\x02\x11\x02", "\x13\x02\x15\x02\x17\b\x19\t\x1B\x02\x1D\n\x03\x02", "\x07\x04\x02FFff\x03\x0229\x05\x02:;CDcd\x04\x02E", "Heh\x05\x022;CHch\x02M\x02\x03\x03\x02\x02\x02\x02", "\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02", "\t\x03\x02\x02\x02\x02\x0B\x03\x02\x02\x02\x02", "\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02", "\x1D\x03\x02\x02\x02\x03\x1F\x03\x02\x02\x02\x05", "\"\x03\x02\x02\x02\x07&\x03\x02\x02\x02\t*\x03\x02", "\x02\x02\x0B-\x03\x02\x02\x02\r:\x03\x02\x02\x02", "\x0F<\x03\x02\x02\x02\x11A\x03\x02\x02\x02\x13", "F\x03\x02\x02\x02\x15I\x03\x02\x02\x02\x17K\x03", "\x02\x02\x02\x19M\x03\x02\x02\x02\x1BO\x03\x02", "\x02\x02\x1DQ\x03\x02\x02\x02\x1F \x05\x13\n\x02", " !\x05\r\x07\x02!\x04\x03\x02\x02\x02\"#\x05\t\x05", "\x02#$\x05\x15\x0B\x02$%\x05\t\x05\x02%\x06\x03", "\x02\x02\x02&'\x05\x0B\x06\x02'(\x05\x15\x0B\x02", "()\x05\x0B\x06\x02)\b\x03\x02\x02\x02*+\x05\x13", "\n\x02+,\x05\x0F\b\x02,\n\x03\x02\x02\x02-.\x05\x13", "\n\x02./\x05\x11\t\x02/\f\x03\x02\x02\x0201\n\x02", "\x02\x0212\x05\x1B\x0E\x0223\x05\x1B\x0E\x0234\x05", "\x1B\x0E\x024;\x03\x02\x02\x0256\t\x02\x02\x026", "7\t\x03\x02\x0278\x05\x1B\x0E\x0289\x05\x1B\x0E", "\x029;\x03\x02\x02\x02:0\x03\x02\x02\x02:5\x03\x02", "\x02\x02;\x0E\x03\x02\x02\x02<=\t\x02\x02\x02=>", "\t\x04\x02\x02>?\x05\x1B\x0E\x02?@\x05\x1B\x0E\x02", "@\x10\x03\x02\x02\x02AB\t\x02\x02\x02BC\t\x05\x02", "\x02CD\x05\x1B\x0E\x02DE\x05\x1B\x0E\x02E\x12\x03", "\x02\x02\x02FG\x07^\x02\x02GH\x07w\x02\x02H\x14", "\x03\x02\x02\x02IJ\x07/\x02\x02J\x16\x03\x02\x02", "\x02KL\x07]\x02\x02L\x18\x03\x02\x02\x02MN\x07_", "\x02\x02N\x1A\x03\x02\x02\x02OP\t\x06\x02\x02P\x1C", "\x03\x02\x02\x02QR\x0B\x02\x02\x02R\x1E\x03\x02", "\x02\x02\x04\x02:\x02"].join("");

var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
    return new antlr4.dfa.DFA(ds, index);
});

function U16To32Lexer(input) {
    antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

U16To32Lexer.prototype = Object.create(antlr4.Lexer.prototype);
U16To32Lexer.prototype.constructor = U16To32Lexer;

U16To32Lexer.EOF = antlr4.Token.EOF;
U16To32Lexer.Rep = 1;
U16To32Lexer.RangeHigh = 2;
U16To32Lexer.RangeLow = 3;
U16To32Lexer.RepHigh = 4;
U16To32Lexer.RepLow = 5;
U16To32Lexer.OpenBracket = 6;
U16To32Lexer.CloseBracket = 7;
U16To32Lexer.DISCARD = 8;

U16To32Lexer.prototype.channelNames = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

U16To32Lexer.prototype.modeNames = ["DEFAULT_MODE"];

U16To32Lexer.prototype.literalNames = [null, null, null, null, null, null, "'['", "']'"];

U16To32Lexer.prototype.symbolicNames = [null, "Rep", "RangeHigh", "RangeLow", "RepHigh", "RepLow", "OpenBracket", "CloseBracket", "DISCARD"];

U16To32Lexer.prototype.ruleNames = ["Rep", "RangeHigh", "RangeLow", "RepHigh", "RepLow", "CodePointAsCodeUnit", "HighSurrogate", "LowSurrogate", "EscapeU", "Dash", "OpenBracket", "CloseBracket", "HexDigit", "DISCARD"];

U16To32Lexer.prototype.grammarFileName = "U16To32.g4";

exports.U16To32Lexer = U16To32Lexer;